template Service "snmp" {
    check_command = "snmp"
    max_check_attempts = "3"
    check_interval = 1m
    retry_interval = 20s
}

template Service "snmp-port-name" {
    import "snmp"
    vars.snmp_oid = ".1.3.6.1.2.1.31.1.1.1.1.$snmp_if_number$,.1.3.6.1.2.1.2.2.1.2.$snmp_if_number$"
    vars.grafana_graph_disable = true
}

apply Service "Uptime" {
    import "snmp"
    vars.snmp_label = "Uptime"
    vars.snmp_oid = ".1.3.6.1.2.1.1.3.0"
    assign where (host.address || host.address6) && host.vars.snmp_community
}

apply Service "snmp-load" {
  import "generic-service"

  display_name = "CPU load: 1, 5, 15 minutes averages"
  check_command = "snmp-load"

  vars.snmp_warn = "5,3,2"
  vars.snmp_crit = "6,5,3"

  assign where host.vars.snmp_community && host.vars.snmp_load_type == "netsl"
}

apply Service "snmp-load" {
  import "generic-service"

  display_name = "CPU load: average"
  check_command = "snmp-load"

  assign where host.vars.snmp_community && host.vars.snmp_load_type == "stand"
}

apply Service "snmp-memory" {
  import "generic-service"

  display_name = "Memory in use"
  check_command = "snmp-memory"

  vars.snmp_warn = "70,0"
  vars.snmp_crit = "90,0"

  assign where host.vars.snmp_community && host.vars.snmp_is_netsnmp
}

apply Service "snmp-memory" {
  import "generic-service"

  display_name = "Memory in use"
  check_command = "snmp-memory"

  vars.snmp_warn = "70"
  vars.snmp_crit = "90"

  assign where host.vars.snmp_community && (host.vars.snmp_is_hp || host.vars.snmp_is_cisco)
}

apply Service "snmp-memory" {
  import "generic-service"

  display_name = "Memory in use"
  check_command = "snmp-storage"

  vars.snmp_storage_name = host.vars.snmp_storage_mem_name
  vars.snmp_storage_type = "Ram"
  vars.snmp_warn = "80"
  vars.snmp_crit = "90"

  assign where host.vars.snmp_community && host.vars.snmp_storage_mem_name
}

apply Service "snmp-swap" {
  import "generic-service"

  display_name = "Swap in use"
  check_command = "snmp-storage"

  vars.snmp_storage_name = host.vars.snmp_storage_swap_name
  vars.snmp_storage_type = "VirtualMemory"
  vars.snmp_warn = "80"
  vars.snmp_crit = "90"

  assign where host.vars.snmp_community && host.vars.snmp_storage_swap_name
}

apply Service "snmp-storage" {
  import "generic-service"

  display_name = "Disk space in use"
  check_command = "snmp-storage"

  vars.snmp_storage_name = host.vars.snmp_storage_disk_name
  vars.snmp_storage_type = "FixedDisk"
  vars.snmp_warn = "80"
  vars.snmp_crit = "90"

  assign where host.vars.snmp_community && host.vars.snmp_storage_disk_name
}

object CheckCommand "snmp-network-port" {
	import "snmp-interface"

	arguments += {
		"-a" = {
			set_if = "$snmp_interface_admin$"
			description = "Use administrative status instead of operational"
		}
		"--dormant" = {
			set_if = "$snmp_interface_dormant_is_ok$"
			description = "Dormant state is an OK state"
		}
		"--down" = {
			set_if = "$snmp_interface_down_is_ok$"
			description = "Down state is an OK state"
		}
		"--speed64bits" = {
			set_if = "$snmp_interface_speed64bit$"
			description = "Use 64 bits speed counters instead of the standard counters"
		}
	}
}

apply Dependency "switching" to Service {
  parent_host_name = host.vars.network_parent_host
  parent_service_name = "ping4"
  disable_checks = true

  assign where host.vars.network_parent_port
}

apply Service for (interface => config in host.vars.snmp_interfaces) {
  import "generic-service"

  display_name = "Network traffic on " + config.snmp_interface_label
  check_command = "snmp-network-port"

  vars.snmp_interface_admin = false
  vars.snmp_interface_down_is_ok = true
  vars.snmp_interface_ifname = "true"
  vars.snmp_interface_noregexp = "true"
  vars.snmp_warn = "100,100"
  vars.snmp_crit = "100,100"
  vars += config

  assign where host.vars.snmp_community
}
